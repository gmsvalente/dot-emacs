#+TITLE: Literate emacs
#+AUTHOR: Gustavo Valente
#+EMAIL: gustavomsvalente@gmail.com

#+STARTUP: show2levels

This is the emacs configuration file

* header
#+begin_src emacs-lisp
  ;;; config.el --- Emacs configuration file  -*- lexical-binding: t; -*-
  ;;;
  ;;;  **********************************
  ;;;  **  THIS FILE IS AUTOGENERATED  **
  ;;;  **    DO NOT MANUALLY EDIT IT   **
  ;;;  **********************************
  ;;;  **    (OR EDIT BY YOUR RISK)    **
  ;;;  **********************************
  
  ;;; Copyright (C) 2010-2021 GV
  ;;; Author: Gustavo Valente <github.com/gmsvalente>

  ;;; Commentary:
  ;;; Uses literating programming on config.org

  ;;; Code:

#+end_src

* General Settings

** backup directory
Store the backup files *~ into .backups~ folder.
#+begin_src emacs-lisp
  (setq backup-directory-alist `((".*" . ".backups~/")))
#+end_src

** yes-or-no-p
Change yes and no to y and n.
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** visible-bell
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

** lock-files
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

** global line numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)
#+end_src

** with-editor
#+begin_src emacs-lisp
  (setq with-editor-emacsclient-executable "/usr/local/bin/emacsclient")
#+end_src

** mouse-avoidance
#+begin_src emacs-lisp
  (mouse-avoidance-mode 'banish)
#+end_src


* theme
#+begin_src emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config
    (load-theme 'zenburn 'no-confirm)
    (set-face-attribute 'default nil :height 140))

  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1))

  (use-package beacon
    :ensure t
    :config
    (setq beacon-color "#ff0000")
    (setq beacon-size 80)
    :init
    (beacon-mode 1))
#+end_src
* rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src


* yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode t))

  (use-package clojure-snippets :ensure t)
  (use-package java-snippets :ensure t)
  (use-package aws-snippets :ensure t)
  (use-package common-lisp-snippets :ensure t)

  (use-package yasnippet-classic-snippets :ensure t)
  (use-package yasnippet-snippets :ensure t)

#+end_src
* flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t)
#+end_src
* ivy
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :init (ivy-mode t))
#+end_src
* which-key
#+begin_src emacs-lisp
    (use-package which-key
      :ensure t
      :init (which-key-mode))
#+end_src


* paredit
#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :commands paredit-mode
    :hook ((emacs-lisp-mode
	    cider-repl-mode
	    clojure-mode
	    clojurescript-mode
	    slime-repl-mode
	    lisp-mode) . paredit-mode))
#+end_src

* dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
;    (setq dashboard-banner-logo-title "<yourmessagehere>")
;    (setq dashboard-startup-banner "<yourimagehere>")
    (setq dashboard-items '((recents . 10)
			    (projects . 15)
			    (bookmarks . 3)
			    (agenda . 10)
			    (registers . 3)))
    :init
    (dashboard-setup-startup-hook))
#+end_src

* org-mode
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t))))

  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))

#+end_src

* multiple-cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (("C-S-c C-S-c" . mc/edit-lines)
	   ("C->" . mc/mark-next-like-this)
	   ("C-<" . mc/mark-previous-like-this)
	   ("C-c C-<" . mc/mark-all-like-this)))
#+end_src

* company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :pin "gnu"
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    :init
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1)
    (setq company-selection-wrap-around t))
#+end_src

* projectile
#+begin_src emacs-lisp 
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1))
#+end_src



* magit
Magit is the git interface for emacs. It is AWESOME
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
* lsp
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands lsp
    :hook ((rustic-mode) . #'lsp))

  ;; hooks for lsp clj's lsp suck!!
  ;; (clojure-mode
  ;;  clojurec-mode
  ;;  clojurescript-mode)

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode
    :init
    (with-eval-after-load 'lsp-mode
      (setq lsp-headerline-breadcrumb-enable nil)))

#+end_src
* docker
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+end_src


* Languages

** clojure
Clojure is my main programming language
#+begin_src emacs-lisp
  (use-package clojure-mode
    :ensure t
    :config 
    (require 'flycheck-clj-kondo))

  (use-package flycheck-clj-kondo :ensure t)

  (use-package cider
    :ensure t
    :config
    (setq org-babel-clojure-backend 'cider))

  (defun clj-refactor-hook-fn ()
    (clj-refactor-mode 1)
    (yas-minor-mode 1))

  (use-package clj-refactor
    :ensure t
    :init
    (add-hook 'clojure-mode #'clj-refactor-hook-fn)
    (add-hook 'clojurescript-mode #'clj-refactor-hook-fn)
    (add-hook 'cider-repl-mode #'clj-refactor-hook-fn))
#+end_src
** common-lisp
#+begin_src emacs-lisp
  (setq inferior-lisp-program "sbcl")
  (load (expand-file-name "~/.quicklisp/slime-helper.el"))

#+end_src

** rust
#+begin_src emacs-lisp
  (use-package rustic
    :ensure t
    :hook ((rustic-mode . paredit-mode))
    :init
    (setq rustic-analyzer-command '("rustup run stable rust-analyzer")))
#+end_src


** toml
** protobuf
#+begin_src emacs-lisp
  (use-package protobuf-mode
    :ensure t)
#+end_src


